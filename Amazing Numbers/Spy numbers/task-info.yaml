type: edu
files:
- name: test/util/Checker.java
  visible: false
  text: |
    package util;

    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.text.MessageFormat;
    import java.util.function.Predicate;
    import java.util.function.UnaryOperator;

    import static java.util.Objects.isNull;

    public class Checker implements UnaryOperator<UserProgram> {
        protected Predicate<UserProgram> validator;
        protected String feedback;
        protected Object[] parameters;

        protected Checker() {
            this("Incorrect output for user input: {0}.");
        }

        protected Checker(String feedback) {
            this($ -> true, feedback);
        }

        public Checker(Predicate<UserProgram> validator, String feedback) {
            this.feedback = feedback;
            this.validator = validator;
        }

        @Override
        public UserProgram apply(UserProgram program) {
            if (validator.test(program)) {
                return program;
            }
            throw new WrongAnswer(MessageFormat.format(feedback, isNull(parameters)
                    ? new Object[]{program.getInput(), program.getOutput()} : parameters));

        }

    }
  learner_created: false
- name: test/util/TextChecker.java
  visible: false
  text: |
    package util;

    public class TextChecker extends Checker {

        public TextChecker(String expected) {
            this(expected, "Expected that the output contains \"{2}\".");
        }

        public TextChecker(String expected, String feedback) {
            super(feedback);

            validator = program -> {
                parameters = new Object[]{program.getInput(), program.getOutput(), expected};
                return program.getOutput().toLowerCase().contains(expected.toLowerCase());
            };
        }

    }
  learner_created: false
- name: test/util/UserProgram.java
  visible: false
  text: |-
    package util;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.function.Function;

    public class UserProgram {
        private TestedProgram program;

        private Object input;
        private String output;

        public UserProgram start(String... args) {
            program = new TestedProgram();
            output = program.start(args);
            return this;
        }

        public UserProgram check(final Function<UserProgram, UserProgram> checker) {
            return checker.apply(this);
        }

        public CheckResult result() {
            return CheckResult.correct();
        }

        public UserProgram execute(Object userInput) {
            this.input = userInput;
            output = program.execute(userInput.toString());
            return this;
        }

        public String getOutput() {
            return output;
        }

        public Object getInput() {
            return input;
        }

        public boolean isFinished() {
            return program.isFinished();
        }
    }
  learner_created: false
- name: test/util/LinesChecker.java
  visible: false
  text: |
    package util;

    import static java.util.function.Predicate.not;

    public class LinesChecker extends Checker {

        public LinesChecker(final long expected) {
            super("Expected {0} non blank lines but actual output contains {1} lines.");

            validator = program -> {
                final var actual = program.getOutput().lines().filter(not(String::isBlank)).count();
                parameters = new Object[]{expected, actual};
                return actual == expected;
            };
        }


    }
  learner_created: false
- name: test/util/RegexChecker.java
  visible: false
  text: |
    package util;

    import java.util.regex.Pattern;

    public class RegexChecker extends Checker {
        private final Pattern expected;

        public RegexChecker(final String regexp, final String feedback) {
            this(regexp, Pattern.CASE_INSENSITIVE, feedback);
        }

        public RegexChecker(final String regexp, final int flags, final String feedback) {
            super(feedback);
            this.expected = Pattern.compile(regexp, flags);
            validator = program -> expected.matcher(program.getOutput()).find();
        }

    }
  learner_created: false
- name: test/NumbersTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import util.*;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.function.Function;
    import java.util.function.Predicate;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;

    public final class NumbersTest extends StageTest {
        private static final Random random = new Random();

        private static final int NEGATIVE_NUMBERS_TESTS = 5;
        private static final int FIRST_NUMBERS = 15;
        private static final int RANDOM_TESTS = 10;
        private static final int MAX_COUNT = 20;
        private static final int MIN_START = 2;

        private static final Checker WELCOME = new TextChecker("Welcome to Amazing Numbers!");

        private static final Function<UserProgram, UserProgram> HELP =
                new TextChecker("Supported requests")
                        .andThen(new TextChecker("a natural number"))
                        .andThen(new TextChecker("two natural numbers"))
                        .andThen(new TextChecker("property to search for"))
                        .andThen(new TextChecker("enter 0 to exit"));

        private static final Checker ASK_REQUEST = new TextChecker("enter a request");
        private static final Checker ERROR_FIRST = new TextChecker("first parameter should be a natural number or zero");
        private static final Checker ERROR_SECOND = new TextChecker("second parameter should be a natural number");

        private static final Checker ERROR_PROPERTY = new RegexChecker(
                "The property .+ is wrong",
                "The request: \"{0}\" has one wrong property. "
                        + "Expected message: \"The property ... is wrong\"."
        );
        private static final Checker HELP_PROPERTIES = new TextChecker("Available properties");

        private static final Checker LIST_PROPERTIES = new Checker(
                program -> Arrays.stream(NumberProperty.values())
                        .map(Enum::name)
                        .map("(?i)\\b"::concat)
                        .map(Pattern::compile)
                        .map(p -> p.matcher(program.getOutput()))
                        .allMatch(Matcher::find),
                "If incorrect property has been specified, show the list of the available properties."
        );
        private static final Checker PROPERTIES_OF = new RegexChecker(
                "properties of \\d",
                "The first line of number''s properties should contain \"Properties of {0}\"."
        );
        private static final Checker RUNNING = new Checker(Predicate.not(UserProgram::isFinished),
                "The program should continue to work till the user enter \"0\"."
        );
        private static final Checker FINISHED = new Checker(UserProgram::isFinished,
                "The program should finish when the user entered \"0\"."
        );
        private final UserProgram program = new UserProgram();

        private final String[] wrongProperty = new String[]{
                "1 10 May", "40 2 bay", "37 4 8", "67 2 day", "2 54 Prime", "6 8 ...", "5 9 none"
        };

        // Stage #3

        @DynamicTest(order = 5)
        CheckResult welcomeTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = NEGATIVE_NUMBERS_TESTS, order = 10)
        CheckResult notNaturalNumbersTest() {
            long negativeNumber = -random.nextInt(Byte.MAX_VALUE) - 1L;
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(negativeNumber)
                    .check(ERROR_FIRST)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(repeat = RANDOM_TESTS, order = 15)
        CheckResult notNaturalSecondNumberTest() {
            int first = 1 + random.nextInt(Short.MAX_VALUE);
            int negativeSecond = -random.nextInt(Short.MAX_VALUE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(first + " " + negativeSecond)
                    .check(ERROR_SECOND)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // Stage #4

        @DynamicTest(order = 20)
        CheckResult naturalNumbersTest() {
            final var numbers = LongStream.concat(
                    LongStream.range(1, FIRST_NUMBERS),
                    random.longs(RANDOM_TESTS, 1, Long.MAX_VALUE)
            );

            program.start().check(WELCOME).check(HELP);

            numbers.forEach(number -> program
                    .check(ASK_REQUEST)
                    .execute(number)
                    .check(PROPERTIES_OF)
                    .check(new PropertiesChecker(number))
                    .check(RUNNING));

            return program
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(order = 40)
        CheckResult firstNumbersListTest() {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute("1 " + FIRST_NUMBERS)
                    .check(new LinesChecker(FIRST_NUMBERS + 1))
                    .check(new ListChecker(1, FIRST_NUMBERS))
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        private Object[][] getRandomTwo() {
            return random
                    .longs(RANDOM_TESTS, MIN_START, Long.MAX_VALUE - MAX_COUNT)
                    .mapToObj(start -> new Long[]{start, (long) 1 + random.nextInt(MAX_COUNT)})
                    .toArray(Long[][]::new);
        }

        // Stage #5

        @DynamicTest(data = "getRandomTwo", order = 44)
        CheckResult twoRandomNumbersTest(long start, long count) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(start + " " + count)
                    .check(new LinesChecker(count + 1))
                    .check(new ListChecker(start, count))
                    .check(RUNNING)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        @DynamicTest(data = "wrongProperty", order = 50)
        CheckResult wrongPropertyRequestTest(String wrongProperty) {
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(wrongProperty)
                    .check(ERROR_PROPERTY)
                    .check(HELP_PROPERTIES)
                    .check(LIST_PROPERTIES)
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

        // The test generates and checks request "1 10 <property>" for each property

        @DynamicTest(order = 53)
        CheckResult allPropertiesTest() {
            program.start().check(WELCOME).check(HELP);

            Arrays.stream(NumberProperty.values())
                    .map(Enum::name)
                    .map("1 10 "::concat)
                    .map(Request::new)
                    .peek(program.check(ASK_REQUEST)::execute)
                    .forEach(request -> program
                            .check(request.getLinesChecker())
                            .check(new ListChecker(request))
                            .check(RUNNING)
                    );

            return program.execute(0).check(FINISHED).result();
        }

        @DynamicTest(repeat = RANDOM_TESTS, order = 55)
        CheckResult randomTwoNumbersAndPropertyTest() {
            final var request = Request.random(Request.Parameter.THREE);
            return program
                    .start()
                    .check(WELCOME)
                    .check(HELP)
                    .check(ASK_REQUEST)
                    .execute(request)
                    .check(request.getLinesChecker())
                    .check(new ListChecker(request))
                    .check(RUNNING)
                    .check(ASK_REQUEST)
                    .execute(0)
                    .check(FINISHED)
                    .result();
        }

    }
  learner_created: false
- name: test/PropertiesChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    public class PropertiesChecker extends Checker {
        private final long number;

        public PropertiesChecker(long number) {
            this.number = number;
            validator = this::test;
        }

        public boolean test(UserProgram program) {
            for (var property : NumberProperty.values()) {
                final var name = property.name();

                if (!program.getOutput().toLowerCase().contains(name.toLowerCase())) {
                    feedback = "The property \"{0}\" was not found in the output.";
                    parameters = new Object[]{name};
                    return false;
                }

                final var expected = property.test(number);
                final var actualValue = property.extractValue(program.getOutput());

                if (actualValue.isEmpty()) {
                    feedback = "The value for property {0} was not found. Expected: {1}";
                    parameters = new Object[]{name, expected};
                    return false;
                }
                final var actual = actualValue.get();

                if (expected != actual) {
                    feedback = "For the property {0}, the expected value is {1} but was found {2}.";
                    parameters = new Object[]{name, expected, actual};
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/NumberProperty.java
  visible: false
  text: |
    import java.util.Optional;
    import java.util.function.LongPredicate;
    import java.util.regex.Pattern;
    import java.util.stream.LongStream;

    import static java.lang.Character.getNumericValue;

    public enum NumberProperty implements LongPredicate {
        BUZZ(x -> x % 7 == 0 || x % 10 == 7),
        DUCK(number -> digits(number).anyMatch(digit -> digit == 0)),
        PALINDROMIC(number -> {
            final var digits = String.valueOf(number);
            return new StringBuilder(digits).reverse().toString().equals(digits);
        }),
        GAPFUL(number -> number >= 100 &&
                number % (getNumericValue(String.valueOf(number).charAt(0)) * 10L + number % 10) == 0),
        SPY(x -> digits(x).sum() == digits(x).reduce(1L, (a, b) -> a * b)),
        EVEN(x -> x % 2 == 0),
        ODD(x -> x % 2 != 0);

        private final LongPredicate hasProperty;
        private final Pattern pattern = Pattern.compile(
                name() + "\\s*[:-]\\s*(?<value>true|false)",
                Pattern.CASE_INSENSITIVE
        );

        NumberProperty(LongPredicate hasProperty) {
            this.hasProperty = hasProperty;
        }

        private static LongStream digits(long number) {
            return Long.toString(number).chars().mapToLong(Character::getNumericValue);
        }

        @Override
        public boolean test(long number) {
            return hasProperty.test(number);
        }

        public Optional<Boolean> extractValue(String output) {
            final var matcher = pattern.matcher(output);
            final var isFound = matcher.find();
            return Optional
                    .ofNullable(isFound ? matcher.group("value") : null)
                    .map(Boolean::valueOf);
        }

    }
  learner_created: false
- name: test/ListChecker.java
  visible: false
  text: |
    import util.Checker;
    import util.UserProgram;

    import java.util.Arrays;
    import java.util.Set;
    import java.util.function.LongPredicate;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;
    import java.util.stream.LongStream;

    public class ListChecker extends Checker {
        private static final Pattern LINE_PATTERN = Pattern.compile(
                "\\s*(?<number>[\\d,. ]*\\d)\\s*(is|:|-)\\s*(?<properties>.+)",
                Pattern.CASE_INSENSITIVE);
        private static final Pattern NON_DIGIT_SYMBOL = Pattern.compile("\\D");
        private static final Pattern PROPERTIES_SEPARATOR = Pattern.compile("[, ;]+");

        private final long expectedCount;
        private final long[] expectedList;

        public ListChecker(Request request) {
            this(request.getStart(), request.getCount(), request.getProperties());
        }

        public ListChecker(long start, long count) {
            this(start, count, new String[0]);
        }

        public ListChecker(long start, long count, String properties) {
            this(start, count, properties.split("[, ]+"));
        }

        public ListChecker(long start, long count, String[] queries) {
            super("The list is incorrect");
            this.validator = this::test;
            this.expectedList = getExpectedList(start, count, queries);
            this.expectedCount = count;
        }

        private static long[] getExpectedList(long start, long count, String[] queries) {
            final var condition = Arrays.stream(queries).map(query -> {
                final var isNegative = query.startsWith("-");
                final var name = isNegative ? query.substring(1) : query;
                final var property = NumberProperty.valueOf(name.toUpperCase());
                return isNegative ? property.negate() : property;
            }).reduce(number -> true, LongPredicate::and);

            return LongStream
                    .iterate(start, n -> n > 0, n -> n + 1)
                    .filter(condition).limit(count).toArray();
        }

        public boolean test(UserProgram program) {
            final var lines = program.getOutput()
                    .lines()
                    .filter(Predicate.not(String::isBlank))
                    .limit(expectedCount)
                    .collect(Collectors.toUnmodifiableList());

            if (lines.size() != expectedCount) {
                return false;
            }

            final var iterator = lines.iterator();
            for (final long expectedNumber : expectedList) {
                final var actualLine = iterator.next();
                final var matcher = LINE_PATTERN.matcher(actualLine);
                if (!matcher.matches()) {
                    feedback = "Can''t parse line: \"{0}\". Expected: {1} is ...";
                    parameters = new Object[]{actualLine, expectedNumber};
                    return false;
                }

                final var rawNumber = matcher.group("number").strip();
                final var actualNumber = NON_DIGIT_SYMBOL.matcher(rawNumber).replaceAll("");

                if (!String.valueOf(expectedNumber).equals(actualNumber)) {
                    feedback = "Expected number is {0} but actual number is {1}.";
                    parameters = new Object[]{expectedNumber, rawNumber};
                    return false;
                }

                final var actualProperties = PROPERTIES_SEPARATOR
                        .splitAsStream(matcher.group("properties").toLowerCase())
                        .collect(Collectors.toUnmodifiableList());

                final var expectedProperties = Arrays
                        .stream(NumberProperty.values())
                        .filter(property -> property.test(expectedNumber))
                        .map(Enum::name)
                        .map(String::toLowerCase)
                        .collect(Collectors.toUnmodifiableSet());

                if (actualProperties.size() != expectedProperties.size()) {
                    feedback = "For the number {0} the expected number of properties is {1} but the actual number of properties is {2}. " +
                            "Expected properties are {3}. Actual properties are {4}";
                    parameters = new Object[]{expectedNumber, expectedProperties.size(),
                            actualProperties.size(), expectedProperties, actualProperties};
                    return false;
                }

                if (!Set.copyOf(actualProperties).equals(expectedProperties)) {
                    feedback = "For the number {0} the expected properties are {1}. The actual properties are {2}.";
                    parameters = new Object[]{expectedNumber, expectedProperties, actualProperties};
                }
            }
            return true;
        }
    }
  learner_created: false
- name: test/Request.java
  visible: false
  text: |
    import util.LinesChecker;

    import java.util.Random;
    import java.util.regex.Pattern;

    public class Request {
        public static final Pattern PARAMETERS_SEPARATOR = Pattern.compile("\\s+");
        public static final int MAX_COUNT = 20;
        private static final Random random = new Random();

        private final String request;
        private final long start;
        private final int count;
        private String[] properties;

        public Request(String request) {
            this.request = request;
            var data = PARAMETERS_SEPARATOR.split(request, 3);
            int type = data.length;
            properties = type == 3 ? PARAMETERS_SEPARATOR.split(data[2]) : new String[0];
            count = type > 1 ? Integer.parseInt(data[1]) : 0;
            start = Long.parseLong(data[0]);
        }

        public static Request random(Parameter params) {
            final var start = 1 + random.nextInt(Short.MAX_VALUE);
            if (params == Parameter.ONE) {
                return new Request(String.valueOf(start));
            }
            final var count = 1 + random.nextInt(MAX_COUNT);
            if (params == Parameter.TWO) {
                return new Request(start + " " + count);
            }
            final var index = random.nextInt(NumberProperty.values().length);
            final var property = NumberProperty.values()[index].name();
            final var request = start + " " + count + " " + property;
            return new Request(request);
        }

        public long getStart() {
            return start;
        }

        public int getCount() {
            return count;
        }

        public String[] getProperties() {
            return properties;
        }

        public LinesChecker getLinesChecker() {
            return new LinesChecker(count + 1);
        }

        @Override
        public String toString() {
            return request;
        }

        enum Parameter {ONE, TWO, THREE}
    }
  learner_created: false
- name: src/numbers/Main.java
  visible: true
  text: |-
    package numbers;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            exercise4();
        }

        private static void exercise4() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Welcome to Amazing Numbers!");
            Number.printInstructions();

            while (true) {
                System.out.print("Enter a request: ");
                String s = scanner.nextLine();
                processInput(s);
            }
        }

        public static boolean processInput(String s) {
            if (s.length() == 0) {
                Number.printInstructions();
                return true;
            } else {
                String[] strArray = s.split(" ");
                try {
                    long test = Long.parseLong(strArray[0]);
                } catch (Exception e) {
                    System.out.println("\nThe first parameter should be a natural number or zero.");
                    return false;
                }

                switch (strArray.length) {
                    case 1:
                        if (Long.parseLong(strArray[0]) == 0) {
                            System.out.println("\nGoodbye!");
                            System.exit(0);
                        }
                        Number a = new Number(strArray[0]);
                        if (a.isNatural()) {
                            a.printPropertiesLong();
                        } else {
                            System.out.println("\nThe first parameter should be a natural number or zero.\n");
                        }
                        return true;
                    default:
                        try {
                            long test = Long.parseLong(strArray[1]);
                        } catch (Exception e) {
                            System.out.println("\nThe second parameter should be a natural number.");
                            return false;
                        }
                        int count = Integer.parseInt(strArray[1]);
                        long seed = Long.parseLong(strArray[0]);
                        if (seed < 0) {
                            System.out.println("\nThe first parameter should be a natural number.");
                            return false;
                        }
                        if (count < 0) {
                            System.out.println("\nThe second parameter should be a natural number.");
                            return false;
                        }
                        Number[] numbers = new Number[count];
                        System.out.println();
                        for (int i = 0; i < count; i++) {
                            numbers[i] = new Number(seed + (long) i);
                            numbers[i].printPropertiesShort();
                        }
                        System.out.println();
                        return true;
                }
            }
        }

        private static void exercise3() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Welcome to Amazing Numbers!");
            System.out.println();
            System.out.println("Supported requests:");
            System.out.println("- enter a natural number to know its properties;");
            System.out.println("- enter 0 to exit.");
            System.out.println();

            while (true) {
                System.out.print("Enter a request: ");
                String s = scanner.nextLine();
                Number a = new Number(s);
                if (a.getA() == 0) {
                    break;
                } else if (a.isNatural()) {
                    System.out.println("\nProperties of " + a.getA());
                    System.out.println("\t\teven: " + a.isEven());
                    System.out.println("\t\t odd: " + (a.isOdd()));
                    System.out.println("\t\tbuzz: " + (a.isBuzz() > 0 ? "true" : "false"));
                    System.out.println("\t\tduck: " + a.isDuck());
                    System.out.println(" palindromic: " + a.isPalindromic());
                    System.out.println();
                } else {
                    System.out.println("\nThe first parameter should be a natural number or zero.\n");
                }
            }
        }

        private static void exercise2() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter a natural number:");
            String s = scanner.nextLine();
            Number a = new Number(s);
            if (a.isNatural()) {
                System.out.println("Properties of " + a.getA());
                System.out.println("\t\teven: " + a.isEven());
                System.out.println("\t\t odd: " + (a.isOdd()));
                System.out.println("\t\tbuzz: " + (a.isBuzz() > 0 ? "true" : "false"));
                System.out.println("\t\tduck: " + a.isDuck());
            } else {
                System.out.println("This number is not natural!");
            }
        }

        private static void exercise1() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Enter a natural number:");
            String s = scanner.nextLine();
            Number a = new Number(s);
            if (a.isNatural()) {
                System.out.println(String.format("This number is %s.", a.isEven() ? "Even" : "Odd"));
                if (a.isBuzz() > 0) {
                    System.out.println("It is a Buzz number.");
                    System.out.println("Explanation:");
                    System.out.printf("%d %s.", a.getA(), a.isBuzz() == 1 ? "ends with 7" : a.isBuzz() == 2 ? "is divisible by 7" : "is divisible by 7 and ends with 7.");
                } else {
                    System.out.println("It is not a Buzz number.");
                    System.out.println("Explanation:");
                    System.out.printf("%d is neither divisible by 7 nor does it end with 7.\n", a.getA());
                }
            } else {
                System.out.println("This number is not natural!");
            }
        }
    }

    class Number {
        private long a;
        private String as;
        private static final int BUZZ = 7;

        public Number(String s) {
            a = Long.parseLong(s);
            as = Long.toString(a);
        }

        public Number(Long l) {
            a = l;
            as = Long.toString(a);
        }

        public void printPropertiesLong() {
            System.out.println("\nProperties of " + getA());
            System.out.println("\t\teven: " + isEven());
            System.out.println("\t\t odd: " + isOdd());
            System.out.println("\t\tbuzz: " + (isBuzz() > 0 ? "true" : "false"));
            System.out.println("\t\tduck: " + isDuck());
            System.out.println(" palindromic: " + isPalindromic());
            System.out.println("\t  gapful: " + isGapful());
            System.out.println();
        }

        public void printPropertiesShort() {
            boolean isFirst = true;
            String s = Long.toString(getA()) + " is";
            if (isEven()) {
                s += isFirst ? " even" : ", even";
                isFirst = false;
            }
            if (isOdd()) {
                s += isFirst ? " odd" : ", odd";
                isFirst = false;
            }
            s += isBuzz() > 0 ? ", buzz" : "";
            s += isDuck() ? ", duck" : "";
            s += isPalindromic() ? ", palindromic" : "";
            s += isGapful() ? ", gapful" : "";
            System.out.println("\t\t" + s + "\n");
        }

        public static void printInstructions() {
            System.out.println();
            System.out.println("Supported requests:");
            System.out.println("- enter a natural number to know its properties;");
            System.out.println("- enter two natural numbers to obtain the properties of the list:");
            System.out.println("  * the first parameter represents a starting number;");
            System.out.println("  * the second parameter shows how many consecutive numbers are to be processed;");
            System.out.println("- separate the parameters with one space;");
            System.out.println("- enter 0 to exit.");
            System.out.println();
        }

        public long getA() {
            return a;
        }

        boolean isNatural() {
            return (a > 0);
        }

        boolean isEven() {
            return (a % 2 == 0);
        }

        boolean isOdd() {
            return (a % 2 != 0);
        }

        boolean isGapful() {
            if (as.length() < 3) {
                return false;
            }
            int b = Integer.parseInt(as.substring(0, 1) + as.substring(as.length() - 1, as.length()));
            return a % b == 0 ? true : false;
        }

        int isBuzz() {
            //return 1 if ends with 7; 2 if divisible by 7; 3 if both
            return (a % BUZZ == 0 && a % 10 == BUZZ ? 3 : a % 10 == BUZZ ? 1 : a % BUZZ == 0 ? 2 : 0);
        }

        boolean isPalindromic() {
            int length = as.length();
            if (length == 1) {
                return true;
            }
            for (int i = 0; i < length / 2; i++) {
                if (as.charAt(i) != as.charAt(length - 1 - i)) {
                    return false;
                }
            }
            return true;
        }

        boolean isDuck() {
            return as.indexOf("0") > 0 ? true : false;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/184/stages/935/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Nov 2021 10:54:29 UTC
record: 4
